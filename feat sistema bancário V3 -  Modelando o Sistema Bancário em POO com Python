from abc import ABC, abstractmethod
from datetime import date, datetime


# --------- CLASSES DE CLIENTE ---------
class Cliente:
    def __init__(self, endereco: str):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)


class PessoaFisica(Cliente):
    def __init__(self, nome: str, cpf: str, data_nascimento: date, endereco: str):
        super().__init__(endereco)
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento


# --------- CLASSES DE CONTA ---------
class Conta:
    def __init__(self, numero: int, cliente: Cliente):
        self.saldo = 0
        self.numero = numero
        self.agencia = "0001"
        self.cliente = cliente
        self.historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero: int):
        return cls(numero, cliente)

    def saldo_atual(self):
        return self.saldo

    def sacar(self, valor: float):
        if valor > self.saldo:
            print("\n@@@ Saldo insuficiente! @@@")
            return False
        elif valor > 0:
            self.saldo -= valor
            print(f"\n=== Saque de R$ {valor:.2f} realizado! ===")
            return True
        else:
            print("\n@@@ Valor inválido para saque. @@@")
            return False

    def depositar(self, valor: float):
        if valor > 0:
            self.saldo += valor
            print(f"\n=== Depósito de R$ {valor:.2f} realizado! ===")
            return True
        else:
            print("\n@@@ Valor inválido para depósito. @@@")
            return False


class ContaCorrente(Conta):
    def __init__(self, numero: int, cliente: Cliente, limite: float = 500, limite_saques: int = 3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques
        self.numero_saques = 0

    def sacar(self, valor: float):
        excedeu_limite = valor > self.limite
        excedeu_saques = self.numero_saques >= self.limite_saques

        if excedeu_limite:
            print("\n@@@ Valor do saque excede o limite. @@@")
            return False
        elif excedeu_saques:
            print("\n@@@ Número máximo de saques excedido. @@@")
            return False
        elif super().sacar(valor):
            self.numero_saques += 1
            return True
        return False


# --------- HISTÓRICO ---------
class Historico:
    def __init__(self):
        self.transacoes = []

    def adicionar_transacao(self, transacao):
        self.transacoes.append(
            {"tipo": transacao.__class__.__name__, "valor": transacao.valor,
             "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S")}
        )


# --------- TRANSAÇÕES ---------
class Transacao(ABC):
    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta: Conta):
        pass


class Deposito(Transacao):
    def __init__(self, valor: float):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta: Conta):
        if conta.depositar(self.valor):
            conta.historico.adicionar_transacao(self)


class Saque(Transacao):
    def __init__(self, valor: float):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta: Conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)


# --------- MENU DO SISTEMA ---------
def menu():
    print("""
    ===== SISTEMA BANCÁRIO =====
    [1] Criar cliente
    [2] Criar conta
    [3] Listar contas
    [4] Depositar
    [5] Sacar
    [6] Extrato
    [0] Sair
    """)
    return input("Escolha uma opção: ")


clientes = []
contas = []


def encontrar_cliente(cpf):
    for cliente in clientes:
        if cliente.cpf == cpf:
            return cliente
    return None


def criar_cliente():
    cpf = input("Informe o CPF: ")
    cliente = encontrar_cliente(cpf)

    if cliente:
        print("\n@@@ Cliente já existe! @@@")
        return

    nome = input("Nome completo: ")
    data_nasc = input("Data de nascimento (dd-mm-aaaa): ")
    endereco = input("Endereço: ")

    dia, mes, ano = map(int, data_nasc.split("-"))
    cliente = PessoaFisica(nome, cpf, date(ano, mes, dia), endereco)

    clientes.append(cliente)
    print("\n=== Cliente criado com sucesso! ===")


def criar_conta():
    cpf = input("Informe o CPF do cliente: ")
    cliente = encontrar_cliente(cpf)

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    numero_conta = len(contas) + 1
    conta = ContaCorrente.nova_conta(cliente, numero_conta)
    cliente.adicionar_conta(conta)
    contas.append(conta)
    print("\n=== Conta criada com sucesso! ===")


def listar_contas():
    for conta in contas:
        print(f"Agência: {conta.agencia} | Número: {conta.numero} | Titular: {conta.cliente.nome}")


def depositar():
    cpf = input("CPF do cliente: ")
    cliente = encontrar_cliente(cpf)

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    valor = float(input("Valor do depósito: "))
    transacao = Deposito(valor)
    cliente.realizar_transacao(cliente.contas[0], transacao)


def sacar():
    cpf = input("CPF do cliente: ")
    cliente = encontrar_cliente(cpf)

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    valor = float(input("Valor do saque: "))
    transacao = Saque(valor)
    cliente.realizar_transacao(cliente.contas[0], transacao)


def extrato():
    cpf = input("CPF do cliente: ")
    cliente = encontrar_cliente(cpf)

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    conta = cliente.contas[0]
    print("\n=== Extrato ===")
    for t in conta.historico.transacoes:
        print(f"{t['data']} - {t['tipo']}: R$ {t['valor']:.2f}")
    print(f"Saldo atual: R$ {conta.saldo_atual():.2f}")


# --------- MAIN LOOP ---------
if __name__ == "__main__":
    while True:
        opcao = menu()

        if opcao == "1":
            criar_cliente()
        elif opcao == "2":
            criar_conta()
        elif opcao == "3":
            listar_contas()
        elif opcao == "4":
            depositar()
        elif opcao == "5":
            sacar()
        elif opcao == "6":
            extrato()
        elif opcao == "0":
            print("\nSaindo do sistema...")
            break
        else:
            print("\n@@@ Opção inválida, tente novamente. @@@")


